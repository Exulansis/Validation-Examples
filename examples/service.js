const { JolocomLib } = require('jolocom-lib')

/**
 * @description Equivalent to service backend generating a credential request, signing it, and encoding it as a JWT
 * @returns JWT - Credential request generated by the serivce, as base64 encoded JWT
 */

exports.createCredentialRequest = async (serviceIdentity, serviceEncryptionPass) => {
  /** Create the ceredential request JSON web token based on specified requirements */
  const requestToken = await serviceIdentity.create.interactionTokens.request.share(
    credentialRequestCreationOptions,
    serviceEncryptionPass // The password to decrypt the seed for key generation as part of signing the JWT
  )

  /** Serialise the credential request JSON web token instance as a base64 encoded JWT */
  return requestToken.encode()
}

/**
 * @description Validate the 
 * @returns JWT - Credential request generated by the serivce, as base64 encoded JWT
 */

exports.consumeCredentialResponse = async (credentialResponseJWT, credentialRequestJWT, serviceIdentity) => {
  const response = await JolocomLib.parse.interactionToken.fromJWT(credentialResponseJWT)
  const request = await JolocomLib.parse.interactionToken.fromJWT(credentialRequestJWT)

  /** Ensure request and response match, will check the nonce, audience, and signature. Will check the callbackURL too in next
   *  minor release.
   */

  await serviceIdentity.validateJWT(response, request)

  if (!response.interactionToken.satisfiesRequest(request.interactionToken)) {
    throw new Error('Invalid credential passed, make sure issuer is currect.')
  }
  
  return true
}

/**
 * To make things more readable.
 */
const trustedDid = 'did:jolo:892c86282977dd5e4bb0c254461407f0ebfb9bd3c8518ab72e259812078c5fbc'

const credentialRequestCreationOptions = {
  callbackURL: 'https://demo-backend.com/',
  credentialRequirements: [
    {
      type: ['Credential', 'ProofOfNameCredential'],
      constraints: [{'==': [{var: 'issuer'}, trustedDid]}]
    }
  ]
}
